// string[,] table = new string[2,3]; Задаем двумерный массив.
 // int[,] matrix = new int[5,8]; прямоугольная таблица/матрица чисел.
/*
 string[,] table = new string[2,5]; //строки 2 ==> максимальный индекс строки =1 (от нуля и строки с толбцы)

 table[1,2] = "слово";

 for(int rows = 0; rows < 2; rows++)
 {
    for(int columns = 0; columns < 5; columns++)
    {
        Console.WriteLine($"{table[rows, columns]}"); 
    }
 }
*/
//====================================
/*

 int[,] matrix = new int[3,4];

 for(int i = 0; i < 3; i++)
 {
    for(int j = 0; j < 4; j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
Console.WriteLine();
}
*/
//=======================================
/*
//Как можно задать переменные.

int[,] matrix = new int[3,4];

 for(int i = 0; i < matrix.GetLength(0); i++) //0 - количество строк.
 {
    for(int j = 0; j < matrix.GetLength(1); j++)
    {
        Console.Write($"{matrix[i, j]} ");
    }
Console.WriteLine();
}
*/
//===================

// Печатает матрицу и заполняет ее числами.

void PrintArray(int[,] matr) //Печатает на экран.
{
    for(int i = 0; i < matr.GetLength(0); i++) //0 - количество строк.
    {
        for(int j = 0; j < matr.GetLength(1); j++)
        {
            Console.Write($"{matr[i, j]} ");
        }
        Console.WriteLine();
    }
}
/*
int[,] matrix = new int[3,4]; //Принимает двумерную таблицу чисел.
PrintArray(matrix);
*/
//==============================

// Заполняем матрицу случайными числами.

void FillArray(int[,] matr) //Печатает на экран.
{
    for(int i = 0; i < matr.GetLength(0); i++) //0 - количество строк.
    {
        for(int j = 0; j < matr.GetLength(1); j++)
        {
            matr[i,j] = new Random().Next(1,10); //[1;10)]           
        }
    }
}
/*
int[,] matrix = new int[3,4]; //Принимает двумерную таблицу чисел.
PrintArray(matrix);
FillArray(matrix);
Console.WriteLine(); //добавили строчку-разделитель
PrintArray(matrix);

*/
// MatrixName.GetLength(0) - возвращает количество строк в массиве.
// MatrixName.GetLength(1) - возвращает количество столбцов.

//=====================================

//int[,] pic = new int[23,25]; Прямоугольная таблица чесел, 23 строки, 25 столбцов.

// 0 - закрашенный пиксель. 1 - не закрашенный.
//Как закрасить внутреннюю область.
// Находим точку внутри замкнутого контура. Если (.) не закрашена, закрашиваем.

int[,] pic = new int[,]
{
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
    {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
    {0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};
//Есть фиксированные данные, поэтому кол-во строчек и столбцов не указываем.

//Метод выводит картинку

void PrintImage(int[,] image) //Печатает на экран.
{
    for(int i = 0; i < image.GetLength(0); i++) //0 - количество строк.
    {
        for(int j = 0; j < image.GetLength(1); j++)
        {
            if(image[i,j] == 00) Console.Write($" ");
            else Console.Write($"+");
        }
        Console.WriteLine();
    }
}

// Метод, который закрасит картинку.

void FillImage(int row, int col)
{
    if(pic[row, col] == 0) //если текущий пиксель с указанной позицией равен нулю, красим единичкой.
    {
        pic[row, col] = 1;
        FillImage(row - 1, col); 
        FillImage(row, col - 1); //в этой же строке - влево.
        FillImage(row + 1, col);
        FillImage(row, col + 1); // та же строка - вправо.
    }
}
/*
PrintImage(pic);
FillImage(13,13); // точка внутри изображения
PrintImage(pic);
*/
//======================================================
// Рекурсия - функция, заданная через саму себя.

// 5! = 5 * 4 * 3 * 2 * 1 Факториал
// 5! = 5 * 4!
// 4! = 4 * 3!
/*
int Factorial(int n)
{
    if(n == 1) return 1; // 1! = 1, 0! == 1
    else return n * Factorial(n - 1);
}

Console.WriteLine(Factorial(3)); // 1*2*3 = 6
*/
//========================================================
/*
double Factorial(int n)
{
    if(n == 1) return 1; // 1! = 1, 0! == 1
    else return n * Factorial(n - 1);
}

for(int i = 1; i < 40; i++)
{
    //Console.WriteLine(Factorial(i));  //Большие числа не считает.
    Console.WriteLine($"{i}! = {Factorial(i)}");
}
*/
//===========================================
 
 // Fibonacci
// f(1) = 1
// f(2) = 1
// f(n) = f(n - 1) + f(n - 2)

int Fibonacci(int n)
{
    if(n == 1 || n == 2) return 1;
    else return Fibonacci(n - 1) + Fibonacci(n - 2);
}

for(int i = 1; i < 50; i++)
{
    //Console.Write(Fibonacci(i)); //Медленно работает
    Console.WriteLine($"f({i}) = {Fibonacci(i)}");
    
    Console.WriteLine();
}